// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PremierKitchensDB.Data;

namespace PremierKitchensDB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181008061451_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<string>("Address3");

                    b.Property<string>("Address4");

                    b.Property<int>("AddressTypeID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime?>("DateFrom")
                        .IsRequired();

                    b.Property<DateTime?>("DateTo");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("PostcodeIn")
                        .IsRequired();

                    b.Property<string>("PostcodeOut")
                        .IsRequired();

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressTypeName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("AddressTypeID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Forename");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Area", b =>
                {
                    b.Property<int>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("AreaID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeInfo");

                    b.Property<int>("ChangeType");

                    b.Property<int>("ObjectID");

                    b.Property<string>("RowDescription");

                    b.Property<string>("Screen");

                    b.Property<string>("TableName");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WhereClause");

                    b.HasKey("AuditTrailID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanBeContacted");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DateOfEnquiry");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("HasOutstandingRemedialWork");

                    b.Property<int?>("LegacyCustomerID");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15);

                    b.Property<decimal?>("OrderValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShowroomID");

                    b.Property<int>("SourceOfInformationID");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(15);

                    b.HasKey("CustomerID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ShowroomID");

                    b.HasIndex("SourceOfInformationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.CustomerArea", b =>
                {
                    b.Property<int>("CustomerID");

                    b.Property<int>("AreaID");

                    b.HasKey("CustomerID", "AreaID");

                    b.HasIndex("AreaID");

                    b.ToTable("CustomerArea");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.GetCustomerList", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Areas");

                    b.Property<bool>("CanBeContacted");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DateOfEnquiry");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("HasOutstandingRemedialWork");

                    b.Property<int?>("LegacyCustomerID");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15);

                    b.Property<decimal?>("OrderValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShowroomID");

                    b.Property<string>("ShowroomName");

                    b.Property<int>("SourceOfInformationID");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(10);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(15);

                    b.HasKey("CustomerID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ShowroomID");

                    b.HasIndex("SourceOfInformationID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GetCustomerList");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Lookup", b =>
                {
                    b.Property<string>("Domain");

                    b.Property<string>("LookupCode");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LookupName")
                        .IsRequired();

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Domain", "LookupCode");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<bool>("IsAlert");

                    b.Property<string>("NoteText");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("NoteID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Showroom", b =>
                {
                    b.Property<int>("ShowroomID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ShowroomName");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ShowroomID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Showroom");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.SourceOfInformation", b =>
                {
                    b.Property<int>("SourceOfInformationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("SourceOfInformationName");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("SourceOfInformationID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SourceOfInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Address", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.Customer", "Customer")
                        .WithMany("Address")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.AddressType", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Area", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.AuditTrail", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Customer", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.Showroom", "Showroom")
                        .WithMany("Customer")
                        .HasForeignKey("ShowroomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.SourceOfInformation", "SourceOfInformation")
                        .WithMany("Customer")
                        .HasForeignKey("SourceOfInformationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.CustomerArea", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.Area", "Area")
                        .WithMany("CustomerArea")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.Customer", "Customer")
                        .WithMany("CustomerArea")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PremierKitchensDB.Models.GetCustomerList", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.Showroom", "Showroom")
                        .WithMany()
                        .HasForeignKey("ShowroomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.SourceOfInformation", "SourceOfInformation")
                        .WithMany()
                        .HasForeignKey("SourceOfInformationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Lookup", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Note", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.Customer", "Customer")
                        .WithMany("Note")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.Showroom", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("PremierKitchensDB.Models.SourceOfInformation", b =>
                {
                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserCreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("PremierKitchensDB.Models.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
